{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactList/Contact/Contact.module.css","components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","components/Notification/Notification.module.css","components/Section/Section.module.css","redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.js","components/ContactList/Contact/Contact.js","components/ContactList/ContactList.js","components/Filter/Filter.js","components/Notification/Notification.js","components/Section/Section.js","components/views/ContactsView.js"],"names":["module","exports","fetchItemsRequest","contactsActions","fetchItemsSuccess","fetchItemsError","addItemRequest","addItemSuccess","addItemError","deleteItemRequest","deleteItemSuccess","deleteItemError","dispatch","a","axios","get","data","message","contact","post","id","delete","state","contacts","items","filter","loading","ContactForm","name","number","handleInputChange","e","target","value","setState","handleFormSubmit","preventDefault","props","nameToLowerCase","toLowerCase","some","item","alert","split","map","string","charAt","toUpperCase","slice","join","onSubmit","this","className","styles","label","input","type","pattern","title","required","onChange","placeholder","button","Component","connect","contactsSelectors","contactsOperations","Contact","onDelete","nameToUpperCaseFirstLetter","span","onClick","deleteContact","idContact","ContactList","changeFilter","actions","Filter","Notification","Section","children","useEffect","cleanFilter","filteredContacts","includes","sort","b","localeCompare"],"mappings":"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","file":"static/js/3.6535b62d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactForm\":\"ContactForm_ContactForm__BiUNT\",\"label\":\"ContactForm_label__1WqN_\",\"input\":\"ContactForm_input__2z1_l\",\"button\":\"ContactForm_button__1Ou3W\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Contact\":\"Contact_Contact__3aa5G\",\"span\":\"Contact_span__2pr03\",\"button\":\"Contact_button__y9inV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactList\":\"ContactList_ContactList__3ZgdZ\",\"letter\":\"ContactList_letter__exrtq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Filter\":\"Filter_Filter__2qlur\",\"legend\":\"Filter_legend__3jPHY\",\"label\":\"Filter_label__3xGg6\",\"input\":\"Filter_input__1uF_6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Notification\":\"Notification_Notification__34nHn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Section\":\"Section_Section__3Dniv\"};","import axios from 'axios';\nimport contactsActions from './contacts-actions';\n\nconst {\n  fetchItemsRequest,\n  fetchItemsSuccess,\n  fetchItemsError,\n  addItemRequest,\n  addItemSuccess,\n  addItemError,\n  deleteItemRequest,\n  deleteItemSuccess,\n  deleteItemError,\n} = contactsActions;\n\nconst fetchContacts = () => async dispatch => {\n  dispatch(fetchItemsRequest());\n  try {\n    const { data } = await axios.get('/contacts');\n\n    dispatch(fetchItemsSuccess(data));\n  } catch (error) {\n    dispatch(fetchItemsError(error.message));\n  }\n};\n\nconst addContact = contact => async dispatch => {\n  dispatch(addItemRequest());\n  try {\n    const { data } = await axios.post('/contacts', contact);\n\n    dispatch(addItemSuccess(data));\n  } catch (error) {\n    dispatch(addItemError(error.message));\n  }\n};\n\nconst deleteContact = id => async dispatch => {\n  dispatch(deleteItemRequest());\n  try {\n    await axios.delete(`/contacts/${id}`);\n\n    dispatch(deleteItemSuccess(id));\n  } catch (error) {\n    dispatch(deleteItemError(error.message));\n  }\n};\n\nexport default { fetchContacts, addContact, deleteContact };\n","const getContactsItems = state => state.contacts.items;\nconst getContactsFilter = state => state.contacts.filter;\nconst getContactsLoading = state => state.contacts.loading;\n\nexport default { getContactsItems, getContactsFilter, getContactsLoading };\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport contactsOperations from '../../redux/contacts/contacts-operations';\nimport contactsSelectors from '../../redux/contacts/contacts-selectors';\nimport styles from './ContactForm.module.css';\n\nclass ContactForm extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  handleInputChange = e => {\n    const { value, name } = e.target;\n    this.setState({ [name]: value });\n  };\n\n  handleFormSubmit = e => {\n    e.preventDefault();\n    const { name } = this.state;\n    const { items } = this.props;\n    const nameToLowerCase = name.toLowerCase();\n    if (items.some(item => item.name.toLowerCase() === nameToLowerCase)) {\n      // eslint-disable-next-line\n      return alert(\n        `${nameToLowerCase\n          .split(' ')\n          .map(string => string.charAt(0).toUpperCase() + string.slice(1))\n          .join(\n            ' ',\n          )} is already in contacts. Change contact's name or delete old.`,\n      );\n    }\n    this.setState({ name: '', number: '' });\n    return this.props.onSubmit({ ...this.state, name: nameToLowerCase });\n  };\n\n  render() {\n    const { name, number } = this.state;\n    return (\n      <form onSubmit={this.handleFormSubmit} className={styles.ContactForm}>\n        <label className={styles.label}>\n          Name:\n          <input\n            className={styles.input}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            value={name}\n            onChange={this.handleInputChange}\n            placeholder=\"Ivanov Ivan (ivanov ivan)\"\n          />\n        </label>\n        <label className={styles.label}>\n          Number:\n          <input\n            className={styles.input}\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            value={number}\n            onChange={this.handleInputChange}\n            placeholder=\"099 123 45 67 (099-123-45-67)\"\n          />\n        </label>\n        <button type=\"submit\" className={styles.button}>\n          Add Contact\n        </button>\n      </form>\n    );\n  }\n}\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n  items: PropTypes.arrayOf(PropTypes.any).isRequired,\n};\n\nconst mapStateToProps = state => ({\n  items: contactsSelectors.getContactsItems(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: ({ name, number }) =>\n    dispatch(\n      contactsOperations.addContact({\n        name,\n        number,\n      }),\n    ),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Contact.module.css';\n\nconst Contact = ({ id, name, number, onDelete }) => {\n  const nameToUpperCaseFirstLetter = name\n    .split(' ')\n    .map(string => string.charAt(0).toUpperCase() + string.slice(1))\n    .join(' ');\n  return (\n    <li className={styles.Contact}>\n      <span className={styles.span}>{nameToUpperCaseFirstLetter}:</span>\n      <span className={styles.span}> {number}</span>\n      <button\n        className={styles.button}\n        type=\"button\"\n        onClick={() => onDelete(id)}\n      >\n        Delete\n      </button>\n    </li>\n  );\n};\n\nContact.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n\nexport default Contact;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport contactsOperations from '../../redux/contacts/contacts-operations';\nimport Contact from './Contact';\nimport styles from './ContactList.module.css';\n\nconst ContactList = ({ contacts, deleteContact }) => {\n\n  return (\n    <ul className={styles.ContactList}>\n      {contacts.map(({ id, name, number }) => (\n        <div key={id}>\n          {/* {shouldWriteLetter(name) && (\n            <p key={letter} className={styles.letter}>\n              {letter}\n            </p>\n          )} */}\n          <Contact id={id} name={name} number={number} onDelete={deleteContact} />\n        </div>\n      ))}\n    </ul>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.shape).isRequired,\n  deleteContact: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = dispatch => ({\n  deleteContact: idContact => dispatch(contactsOperations.deleteContact(idContact)),\n});\n\nexport default connect(null, mapDispatchToProps)(ContactList);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport actions from '../../redux/contacts/contacts-actions';\nimport contactsSelectors from '../../redux/contacts/contacts-selectors';\nimport styles from './Filter.module.css';\n\nconst Filter = ({ filter, changeFilter }) => (\n  <fieldset className={styles.Filter}>\n    <label className={styles.label}>\n      <input\n        className={styles.input}\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={changeFilter}\n        placeholder=\"Find contacts by name\"\n      />\n    </label>\n  </fieldset>\n);\n\nFilter.propTypes = {\n  filter: PropTypes.string.isRequired,\n  changeFilter: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  filter: contactsSelectors.getContactsFilter(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  changeFilter: ({ target: { value } }) => dispatch(actions.changeFilter(value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Notification.module.css';\n\nconst Notification = ({ message }) => (\n  <p className={styles.Notification}>{message}</p>\n);\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Notification;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Section.module.css';\n\nconst Section = ({ title, children }) => (\n  <section className={styles.Section}>\n    <h2>{title}</h2>\n    {children}\n  </section>\n);\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n};\n\nexport default Section;\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport ContactForm from '../ContactForm';\nimport ContactList from '../ContactList';\nimport Filter from '../Filter';\nimport Notification from '../Notification';\nimport Section from '../Section';\n\nimport contactsOperations from '../../redux/contacts/contacts-operations';\nimport contactsSelectors from '../../redux/contacts/contacts-selectors';\n\nconst Contacts = ({ filter, items, dispatch, loading }) => {\n  useEffect(() => dispatch(contactsOperations.fetchContacts()), []);\n\n  const cleanFilter = filter.toLowerCase();\n  const filteredContacts = items\n    .filter(item => item.name.toLowerCase().includes(cleanFilter))\n    .sort((a, b) => a.name.localeCompare(b.name));\n  return (\n    <>\n      <Section title=\"Phone book\">\n        <ContactForm />\n      </Section>\n      <Section title=\"Contacts\">\n        {loading && <h2>Loading...</h2>}\n        {items[0] ? <Filter /> : <Notification message=\"No contacts added\" />}\n        {items[0] && !filteredContacts[0] && (\n          <Notification message=\"No contact found\" />\n        )}\n        {filteredContacts[0] && <ContactList contacts={filteredContacts} />}\n      </Section>\n    </>\n  );\n};\n\nContacts.propTypes = {\n  filter: PropTypes.string.isRequired,\n  items: PropTypes.arrayOf(PropTypes.any).isRequired,\n  dispatch: PropTypes.func.isRequired,\n  loading: PropTypes.bool.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  items: contactsSelectors.getContactsItems(state),\n  filter: contactsSelectors.getContactsFilter(state),\n  loading: contactsSelectors.getContactsLoading(state),\n});\n\nexport default connect(mapStateToProps)(Contacts);\n"],"sourceRoot":""}